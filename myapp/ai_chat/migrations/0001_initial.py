# Generated by Django 5.1.3 on 2025-07-10 18:30

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIPatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Unique name for this AI patient (e.g., 'Alice', 'Bob').", max_length=50, unique=True)),
                ('problem_story', models.TextField(help_text='The core narrative or presenting problem of the AI patient.')),
                ('father_story', models.TextField(blank=True, help_text='Optional: Story related to the father.', null=True)),
                ('mother_story', models.TextField(blank=True, help_text='Optional: Story related to the mother.', null=True)),
                ('sibling_story', models.TextField(blank=True, help_text='Optional: Story related to siblings.', null=True)),
                ('friends_story', models.TextField(blank=True, help_text='Optional: Story related to friends.', null=True)),
                ('image', models.ImageField(blank=True, help_text='Optional: An image representing the AI patient.', null=True, upload_to='ai_images/')),
            ],
            options={
                'verbose_name': 'AI Patient Profile',
                'verbose_name_plural': 'AI Patient Profiles',
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The official name of the institution.', max_length=200, unique=True)),
                ('address', models.TextField(blank=True, help_text='Physical address of the institution.', null=True)),
                ('contact_person', models.CharField(blank=True, help_text='Main contact person at the institution.', max_length=100, null=True)),
                ('license_key', models.CharField(blank=True, help_text='Unique key provided to the institution for access.', max_length=255, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text="Whether this institution's access is currently active.")),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
            },
        ),
        migrations.CreateModel(
            name='AIPatientTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_number', models.PositiveIntegerField(help_text='Order of the task for this patient (e.g., 1, 2, 3...).')),
                ('title', models.CharField(help_text="Short title for this task (e.g., 'Build Rapport', 'Explore Trauma').", max_length=100)),
                ('description', models.TextField(help_text='Detailed description of what the student needs to achieve in this task. Shown to the student.')),
                ('student_goals', models.JSONField(blank=True, help_text='JSON list of specific objectives for the student to fulfill for this task (for internal evaluation).', null=True)),
                ('task_happiness', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('task_sadness', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('task_anxiety', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('task_loneliness', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('task_hopefulness', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('task_anger', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('task_motivation', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('task_calmness', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('task_fear', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('patient_profile', models.ForeignKey(help_text='The AI patient this task belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='ai_chat.aipatientprofile')),
            ],
            options={
                'verbose_name': 'AI Patient Task',
                'verbose_name_plural': 'AI Patient Tasks',
                'ordering': ['task_number'],
                'unique_together': {('patient_profile', 'task_number')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('program_of_study', models.CharField(blank=True, max_length=100, null=True)),
                ('institution', models.ForeignKey(help_text='The institution this student belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='students', to='ai_chat.institution')),
                ('user', models.OneToOneField(help_text='The associated Django User account for this student.', on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.PositiveIntegerField(help_text='The attempt number for this message within the given task.')),
                ('user_message', models.TextField(blank=True, help_text='The message sent by the student.', null=True)),
                ('ai_message', models.TextField(blank=True, help_text='The reply generated by the AI patient.', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp of this message turn.')),
                ('ai_response_metadata', models.JSONField(blank=True, help_text="Raw JSON metadata from the AI's response (e.g., score, task_completed flag). This contains what the LLM *suggested*.", null=True)),
                ('bot', models.ForeignKey(help_text='The AI patient profile involved in this message turn.', on_delete=django.db.models.deletion.CASCADE, related_name='messages_received', to='ai_chat.aipatientprofile')),
                ('task', models.ForeignKey(help_text='The AI patient task active during this message turn.', on_delete=django.db.models.deletion.CASCADE, related_name='messages_logged', to='ai_chat.aipatienttask')),
                ('student', models.ForeignKey(help_text='The student who sent the message in this turn.', on_delete=django.db.models.deletion.CASCADE, related_name='messages_sent', to='ai_chat.student')),
            ],
            options={
                'verbose_name': 'Message Turn',
                'verbose_name_plural': 'Message Turns',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='StudentAIPatientProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_attempt_number', models.PositiveIntegerField(default=1, help_text='The current attempt number for the active task.')),
                ('current_doctor_score_for_task', models.IntegerField(default=0, help_text="Student's performance score for the current task (0-100). Resets per task attempt.")),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('current_task', models.ForeignKey(blank=True, help_text='The current task the student is on for this AI patient. Null if all tasks completed.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_chat.aipatienttask')),
                ('patient_profile', models.ForeignKey(help_text='The AI patient whose tasks the student is attempting.', on_delete=django.db.models.deletion.CASCADE, to='ai_chat.aipatientprofile')),
                ('student', models.ForeignKey(help_text="The student who is progressing through this AI patient's tasks.", on_delete=django.db.models.deletion.CASCADE, to='ai_chat.student')),
            ],
            options={
                'verbose_name': 'Student AI Patient Progress',
                'verbose_name_plural': 'Student AI Patient Progresses',
                'unique_together': {('student', 'patient_profile')},
            },
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the class or student group (e.g., 'Psychology 101 - Fall 2024').", max_length=100)),
                ('institution', models.ForeignKey(help_text='The institution this student group belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='student_groups', to='ai_chat.institution')),
            ],
            options={
                'verbose_name': 'Student Group (Class)',
                'verbose_name_plural': 'Student Groups (Classes)',
            },
        ),
        migrations.AddField(
            model_name='student',
            name='student_group',
            field=models.ForeignKey(blank=True, help_text='The student group/class this student belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students_in_group', to='ai_chat.studentgroup'),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('specialization', models.CharField(blank=True, max_length=100, null=True)),
                ('institution', models.ForeignKey(help_text='The institution this teacher belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='teachers', to='ai_chat.institution')),
                ('user', models.OneToOneField(help_text='The associated Django User account for this teacher.', on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
            },
        ),
        migrations.AddField(
            model_name='studentgroup',
            name='teacher',
            field=models.ForeignKey(blank=True, help_text='The teacher primarily in charge of this student group.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_chat.teacher'),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Detailed reason for the report.')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the report was filed.')),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether this report has been reviewed and resolved.')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the report was resolved.', null=True)),
                ('reported_message', models.ForeignKey(blank=True, help_text='The specific message turn being reported (optional, if reporting a whole session).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_chat.messages')),
                ('reporter', models.ForeignKey(help_text='The user who filed this report.', on_delete=django.db.models.deletion.CASCADE, related_name='reported_issues', to=settings.AUTH_USER_MODEL)),
                ('reported_student_progress', models.ForeignKey(blank=True, help_text='The student progress session being reported (e.g., if issue is with overall session behavior).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_chat.studentaipatientprogress')),
                ('resolved_by', models.ForeignKey(blank=True, help_text='The teacher who resolved this report.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_chat.teacher')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TaskPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_open', models.BooleanField(default=False, help_text='True if this task is currently open for students in this group.')),
                ('opened_at', models.DateTimeField(blank=True, help_text='Timestamp when the task was opened for this group.', null=True)),
                ('ai_patient_task', models.ForeignKey(help_text='The specific AI Patient Task being controlled.', on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='ai_chat.aipatienttask')),
                ('student_group', models.ForeignKey(help_text='The student group/class for which this permission applies.', on_delete=django.db.models.deletion.CASCADE, related_name='task_permissions', to='ai_chat.studentgroup')),
                ('opened_by_teacher', models.ForeignKey(blank=True, help_text='The teacher who opened this task for the group.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_chat.teacher')),
            ],
            options={
                'verbose_name': 'Task Permission',
                'verbose_name_plural': 'Task Permissions',
                'unique_together': {('student_group', 'ai_patient_task')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='studentgroup',
            unique_together={('institution', 'name')},
        ),
    ]
